import streamlit as st
import cv2
import numpy as np
from PIL import Image
import tempfile
import os
from pathlib import Path

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from utils.detection import TrafficSignDetector
from utils.visualization import create_result_image, create_statistics_chart
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üö¶ Traffic Signs Detection",
    page_icon="üö¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS
st.markdown("""
    <style>
    .main-header {
        font-size: 3rem;
        color: #2E86AB;
        text-align: center;
        margin-bottom: 2rem;
    }
    .info-box {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .detection-result {
        background-color: #e8f4fd;
        padding: 1.5rem;
        border-radius: 0.5rem;
        border-left: 5px solid #2E86AB;
    }
    .stats-container {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫–µ—à–∏—Ä—É–µ–º"""
    detector = TrafficSignDetector(MODEL_PATH)
    return detector

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown('<h1 class="main-header">üö¶ –î–µ—Ç–µ–∫—Ü–∏—è –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤</h1>', 
                unsafe_allow_html=True)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    st.markdown("""
    <div class="info-box">
    <h3>üéØ –û –ø—Ä–æ–µ–∫—Ç–µ</h3>
    <p>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º 
    –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç 15 —Ç–∏–ø–æ–≤ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ 
    —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 95.9%.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
        confidence_threshold = st.slider(
            "üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 
            min_value=0.1, 
            max_value=1.0, 
            value=0.5, 
            step=0.05
        )
        
        iou_threshold = st.slider(
            "üîç –ü–æ—Ä–æ–≥ IoU (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)", 
            min_value=0.1, 
            max_value=1.0, 
            value=0.4, 
            step=0.05
        )
        
        show_confidence = st.checkbox("üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", value=True)
        show_class_names = st.checkbox("üè∑Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤", value=True)
        
        st.markdown("---")
        st.markdown("### üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∑–Ω–∞–∫–∏:")
        
        for class_name in CLASS_NAMES:
            if "Speed Limit" in class_name:
                st.markdown(f"üî¢ {class_name}")
            elif "Light" in class_name:
                st.markdown(f"üö¶ {class_name}")
            elif "Stop" in class_name:
                st.markdown(f"üõë {class_name}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        # –°–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏
        upload_option = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
            ["üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "üì∑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É", "üñºÔ∏è –ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
        )
        
        uploaded_image = None
        
        if upload_option == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
            uploaded_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                type=['png', 'jpg', 'jpeg'],
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG"
            )
            if uploaded_file:
                uploaded_image = Image.open(uploaded_file)
                
        elif upload_option == "üì∑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É":
            camera_image = st.camera_input("–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ")
            if camera_image:
                uploaded_image = Image.open(camera_image)
                
        elif upload_option == "üñºÔ∏è –ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
            demo_image = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:",
                ["traffic_scene_1.jpg", "speed_limit_40.jpg", "stop_sign.jpg"]
            )
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ assets
            st.info("üí° –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫—É assets/demo_images/")
    
    with col2:
        st.header("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏")
        
        if uploaded_image:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            st.subheader("üì∑ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            st.image(uploaded_image, use_container_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é", type="primary"):
                with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
                    detector = load_model()
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_array = np.array(uploaded_image)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
                    results = detector.detect(
                        image_array,
                        conf_threshold=confidence_threshold,
                        iou_threshold=iou_threshold
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    result_image = create_result_image(
                        image_array, 
                        results,
                        show_confidence=show_confidence,
                        show_class_names=show_class_names
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    st.markdown('<div class="detection-result">', unsafe_allow_html=True)
                    st.subheader("‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏")
                    st.image(result_image, use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    if results['detections']:
                        st.markdown('<div class="stats-container">', unsafe_allow_html=True)
                        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        detection_data = []
                        for detection in results['detections']:
                            detection_data.append({
                                "–ó–Ω–∞–∫": detection['class_name'],
                                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{detection['confidence']:.2%}",
                                "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã": f"({detection['bbox'][0]}, {detection['bbox'][1]})"
                            })
                        
                        st.dataframe(detection_data, use_container_width=True)
                        
                        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
                        chart = create_statistics_chart(results['detections'])
                        st.plotly_chart(chart, use_container_width=True)
                        
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
                        st.subheader("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—é")
                        recommendations = generate_driver_recommendations(results['detections'])
                        for rec in recommendations:
                            if rec['type'] == 'warning':
                                st.warning(rec['message'])
                            elif rec['type'] == 'info':
                                st.info(rec['message'])
                            elif rec['type'] == 'success':
                                st.success(rec['message'])
                    
                    else:
                        st.warning("üîç –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤")
        
        else:
            st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", "95.9%", "mAP50")
    
    with col2:
        st.metric("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏", "~3ms", "–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    with col3:
        st.metric("üî¢ –ö–ª–∞—Å—Å–æ–≤ –∑–Ω–∞–∫–æ–≤", "15", "—Ç–∏–ø–æ–≤")

def generate_driver_recommendations(detections):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤"""
    recommendations = []
    
    for detection in detections:
        class_name = detection['class_name']
        confidence = detection['confidence']
        
        if "Speed Limit" in class_name and confidence > 0.8:
            speed = class_name.split()[-1]
            recommendations.append({
                'type': 'warning',
                'message': f"üöó –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: {speed} –∫–º/—á"
            })
        
        elif "Stop" in class_name and confidence > 0.8:
            recommendations.append({
                'type': 'warning', 
                'message': "üõë –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞!"
            })
        
        elif "Red Light" in class_name and confidence > 0.8:
            recommendations.append({
                'type': 'warning',
                'message': "üî¥ –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å!"
            })
        
        elif "Green Light" in class_name and confidence > 0.8:
            recommendations.append({
                'type': 'success',
                'message': "üü¢ –ó–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ"
            })
    
    if not recommendations:
        recommendations.append({
            'type': 'info',
            'message': "‚ÑπÔ∏è –î–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è"
        })
    
    return recommendations

if __name__ == "__main__":
    main()