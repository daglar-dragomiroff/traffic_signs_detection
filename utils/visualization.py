import cv2
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from typing import List, Dict, Any
from config import CLASS_COLORS

def create_result_image(image: np.ndarray, 
                       results: Dict[str, Any],
                       show_confidence: bool = True,
                       show_class_names: bool = True) -> np.ndarray:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
    
    Args:
        image: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (RGB)
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ—Ç TrafficSignDetector
        show_confidence: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        show_class_names: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
        
    Returns:
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
    """
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    result_image = image.copy()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGB -> BGR –¥–ª—è OpenCV
    result_image = cv2.cvtColor(result_image, cv2.COLOR_RGB2BGR)
    
    # –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é –¥–µ—Ç–µ–∫—Ü–∏—é
    for detection in results['detections']:
        bbox = detection['bbox']
        confidence = detection['confidence']
        class_name = detection['class_name']
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–æ–∫—Å–∞
        x1, y1, x2, y2 = bbox
        
        # –¶–≤–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞
        color = CLASS_COLORS.get(class_name, (255, 255, 255))
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        cv2.rectangle(result_image, (x1, y1), (x2, y2), color, 2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        label_parts = []
        if show_class_names:
            label_parts.append(class_name)
        if show_confidence:
            label_parts.append(f"{confidence:.2%}")
        
        label = " | ".join(label_parts)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞
        font = cv2.FONT_HERSHEY_SIMPLEX
        font_scale = 0.6
        thickness = 2
        
        # –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ–Ω–∞
        (text_width, text_height), baseline = cv2.getTextSize(
            label, font, font_scale, thickness
        )
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        cv2.rectangle(
            result_image,
            (x1, y1 - text_height - 10),
            (x1 + text_width, y1),
            color,
            -1
        )
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        cv2.putText(
            result_image,
            label,
            (x1, y1 - 5),
            font,
            font_scale,
            (0, 0, 0),  # –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            thickness
        )
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ BGR -> RGB
    result_image = cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB)
    
    return result_image

def create_statistics_chart(detections: List[Dict[str, Any]]) -> go.Figure:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    
    Args:
        detections: –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–∫—Ü–∏–π
        
    Returns:
        Plotly —Ñ–∏–≥—É—Ä–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    """
    
    if not detections:
        # –ü—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π
        fig = go.Figure()
        fig.add_annotation(
            text="–î–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã",
            xref="paper", yref="paper",
            x=0.5, y=0.5, showarrow=False
        )
        return fig
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    class_counts = {}
    class_confidences = {}
    
    for detection in detections:
        class_name = detection['class_name']
        confidence = detection['confidence']
        
        if class_name not in class_counts:
            class_counts[class_name] = 0
            class_confidences[class_name] = []
        
        class_counts[class_name] += 1
        class_confidences[class_name].append(confidence)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    classes = list(class_counts.keys())
    counts = list(class_counts.values())
    avg_confidences = [np.mean(class_confidences[cls]) for cls in classes]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    fig.add_trace(go.Bar(
        x=classes,
        y=counts,
        name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        marker_color='lightblue',
        yaxis='y',
        text=counts,
        textposition='outside'
    ))
    
    # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    fig.add_trace(go.Scatter(
        x=classes,
        y=avg_confidences,
        mode='lines+markers',
        name='–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
        line=dict(color='red', width=3),
        marker=dict(size=8),
        yaxis='y2'
    ))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
    fig.update_layout(
        title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤",
        xaxis_title="–¢–∏–ø –∑–Ω–∞–∫–∞",
        yaxis=dict(
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            side="left"
        ),
        yaxis2=dict(
            title="–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
            side="right",
            overlaying="y",
            tickformat=".0%"
        ),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        height=400
    )
    
    return fig